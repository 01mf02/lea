#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Architecture of the Léa compiler
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Section
Roadmap
\end_layout

\begin_layout Standard
I propose to implement little bits of language functionality one after another.
 As a start, we should be able to make an AST for the following source code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Then, we might add constants as such:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MEANING = 42;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

After this, conditionals might follow:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MEANING = 42;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (MEANING = 42)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Then variable declarations/assignments:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	meaning : int;
\end_layout

\begin_layout Plain Layout

	meaning := 42;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (meaning = 42)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Then function calling:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure print_greetings()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello from print_greetings()!");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

	print_greetings();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Then function returns:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function calculate_meaning() : int
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return 42;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure main()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	meaning : int;
\end_layout

\begin_layout Plain Layout

	meaning := calculate_meaning();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (meaning = 42)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		writeln("Hello world!");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

And so on ...
\end_layout

\begin_layout Section
Syntax
\end_layout

\begin_layout Standard
The syntax part is concerned with Cup/JFlex.
 The JFlex part is the interface to the semantics part.
 It has to:
\end_layout

\begin_layout Itemize
add constant definitions to the constant table
\end_layout

\begin_layout Itemize
add type definitions to the type table
\end_layout

\begin_layout Itemize
add function definitions to the function table
\end_layout

\begin_layout Standard
For these tasks, the JFlex part needs access to following classes:
\end_layout

\begin_layout Itemize
SyntaxTree
\end_layout

\begin_layout Itemize
Environment
\end_layout

\begin_layout Itemize
Type
\end_layout

\begin_layout Itemize
Value
\end_layout

\begin_layout Standard
Furthermore, it needs access to the type and constant tables.
\end_layout

\begin_layout Section
Semantics
\end_layout

\begin_layout Standard
This part is concerned with the checking of the abstract syntax tree (AST)
 and the generation of the intermediate code.
\end_layout

\begin_layout Subsection
Abstract syntax tree
\end_layout

\begin_layout Standard
JFlex constructs an AST for each function in a Léa source file and adds
 it to the function table.
 During the construction of the AST, the AST has to check if its instructions
 are valid, i.e.
 type consistent.
\end_layout

\begin_layout Standard
We use several classes derived from a basic SyntaxTree class to represent
 the different instructions that may appear in a Léa program.
 For example, we may have the following classes:
\end_layout

\begin_layout Itemize
Assignment.java
\end_layout

\begin_layout Itemize
FunctionCall.java
\end_layout

\begin_layout Itemize
List.java: unary syntax tree which represents a list
\end_layout

\begin_layout Itemize
Return.java
\end_layout

\begin_layout Itemize
Succ.java
\end_layout

\begin_layout Itemize
Tuple.java
\end_layout

\begin_layout Itemize
Variable.java
\end_layout

\begin_layout Itemize
\begin_inset Formula $\dots$
\end_inset


\end_layout

\begin_layout Standard
We might also use interfaces to differentiate different types of syntax
 tree elements:
\end_layout

\begin_layout Itemize
Expression.java: might provide function getType()
\end_layout

\begin_layout Itemize
Instruction.java
\end_layout

\begin_layout Standard
Also, to implement drawing, we might have base classes like:
\end_layout

\begin_layout Itemize
BinarySyntaxTree
\end_layout

\begin_layout Itemize
UnarySyntaxTree
\end_layout

\begin_layout Standard
Note that declarations of new variables are not present as instructions
 in the SyntaxTree, as the information about variables is already contained
 in the environments belonging to each AST.
\end_layout

\begin_layout Standard
We should also provide functions to create a graph from an AST.
 At the end of the parsing process, we may output the graphs for all functions
 to separate files.
\end_layout

\begin_layout Subsection
Environment
\end_layout

\begin_layout Standard
An environment stores tuples (var_name, var_type).
 Internally, this might be implemented as a Map<String, Type>.
 Each AST has a reference to an environment, by which the AST may access
 information about objects in its environment.
\end_layout

\begin_layout Subsection
Type
\end_layout

\begin_layout Standard
The Type class is the superclass of several derived classes, such as:
\end_layout

\begin_layout Itemize
StructType
\end_layout

\begin_layout Itemize
IntType
\end_layout

\begin_layout Itemize
FloatType
\end_layout

\begin_layout Itemize
ListType
\end_layout

\begin_layout Itemize
\begin_inset Formula $\dots$
\end_inset


\end_layout

\begin_layout Standard
Each of these classes has to be able to check equality with another type.
\end_layout

\begin_layout Standard
Because objects may have member variables or functions (think 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

foo.toString()
\end_layout

\end_inset

 or 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

structVar.structMember
\end_layout

\end_inset

), the type class needs functions to search for member variables respectively
 functions.
\end_layout

\begin_layout Subsection
Constant
\end_layout

\begin_layout Standard
The Constant class saves 
\emph on
constant
\emph default
 values.
 It is the superclass of:
\end_layout

\begin_layout Itemize
ListConstant
\end_layout

\begin_layout Itemize
TupleConstant
\end_layout

\begin_layout Itemize
IntConstant
\end_layout

\begin_layout Itemize
FloatConstant
\end_layout

\begin_layout Itemize
StringConstant
\end_layout

\begin_layout Itemize
\begin_inset Formula $\dots$
\end_inset


\end_layout

\begin_layout Standard
Each of these classes has to provide a function like getType().
\end_layout

\begin_layout Standard
Note that ListConstant and TupleConstant will only be used for constant
 definitions; if we construct a list/tuple inside a function, we use the
 List/Tuple class instead, which allows more complex, non-constant expressions
 inside list/tuple definitions, e.g.:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

foo_list := [1, 1+1, mult(1,2)]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Function
\end_layout

\begin_layout Standard
The function class saves information about a function, which is:
\end_layout

\begin_layout Itemize
input arguments: list of tuples (var_name, var_type)
\end_layout

\begin_layout Itemize
output type
\end_layout

\begin_layout Itemize
syntax tree of function
\end_layout

\begin_layout Subsection
Constants table
\end_layout

\begin_layout Standard
The constants table saves tuples (const_name, const_value).
 It may be implemented as Map<String, Value>.
 For reasons of simplicity, I propose that we do not allow constant definitions
 like
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

foo = 1+1;
\end_layout

\end_inset

because this might again require a syntax tree for foo, which we would have
 to check for non-constant expressions.
\end_layout

\begin_layout Subsection
Type table
\end_layout

\begin_layout Standard
The type table stores type definitions, such as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int_list = struct {
\end_layout

\begin_layout Plain Layout

	next: list
\end_layout

\begin_layout Plain Layout

	elem: int
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

color = enum (RED, GREEN, BLUE)
\end_layout

\end_inset

For this, we have to store tuples (type_name, type) in a table, which is
 the type table.
 This may be realised as Map<String, Type>.
\end_layout

\begin_layout Subsection
Function table
\end_layout

\begin_layout Standard
The function table keeps track of functions defined in a Léa source file.
 The function table may be realised as Map<String, Function>.
\end_layout

\end_body
\end_document
