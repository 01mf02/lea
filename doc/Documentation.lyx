#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Documentation de travail :
\begin_inset Newline newline
\end_inset

Creation d'un compilateur pour le langage Léa
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Abstract
Nous avons crée un compilateur pour le langage Léa, qui est capable de créer
 du code Java donné des fichiers Léa.
\end_layout

\begin_layout Section
Cahier des charges précisé
\end_layout

\begin_layout Standard
Notre compilateur est capable de créer du code Java pour un fichier Léa
 donné.
 Un fichier Léa peut contenir des construits suivantes :
\end_layout

\begin_layout Itemize
Définition des constantes.
\end_layout

\begin_layout Itemize
Définitions des types.
\end_layout

\begin_layout Itemize
Définitions des fonctions.
\end_layout

\begin_layout Standard
Partout dans le code Léa, on peut écrire des commentaires de facon suivante
 :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// This is a one-line comment.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* This is a more complex,
\end_layout

\begin_layout Plain Layout

   tremendously long,
\end_layout

\begin_layout Plain Layout

   not very expressive
\end_layout

\begin_layout Plain Layout

   multi-line comment.
 */
\end_layout

\end_inset

Tout fichier Léa ne peut pas utiliser des constantes, types et fonctions
 définis dans les autres fichiers Léa.
\end_layout

\begin_layout Subsection
Définition des constantes
\end_layout

\begin_layout Standard
On peut définir des constantes sans donner leur types, de facon suivante
 :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MEANING = 42;
\end_layout

\begin_layout Plain Layout

PI = 3.14;
\end_layout

\begin_layout Plain Layout

SHAKESPEARE = "To be or not to be ...";
\end_layout

\begin_layout Plain Layout

FIBONACCI = [1, 2, 3, 5, 8];
\end_layout

\begin_layout Plain Layout

TUPLE = (MEANING, PI, SHAKESPEARE, FIBONACCI);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Définitions des types
\end_layout

\begin_layout Standard
On peut définir des nouveaux types de facon suivante :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

date = (int, int, int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

person = struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	name : string;
\end_layout

\begin_layout Plain Layout

	birthday : date;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

person_list = struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	elem : person;
\end_layout

\begin_layout Plain Layout

	next : int_list;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset

Nous supportons l'utilisation des types suivants :
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

bool
\end_layout

\end_inset

 : booléen
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

int
\end_layout

\end_inset

 : entier
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

float
\end_layout

\end_inset

 : virgule flottante
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

string
\end_layout

\end_inset

 : chaîne de lettres
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

list of TYPE
\end_layout

\end_inset

 : liste d'éléments de TYPE
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(TYPE_1, TYPE_2, ..., TYPE_N)
\end_layout

\end_inset

 : n-uplet
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

struct { ELEM_1 : TYPE_1, ..., ELEM_N : TYPE_N }
\end_layout

\end_inset

 : structure
\end_layout

\begin_layout Subsection
Définitions des fonctions
\end_layout

\begin_layout Standard
Nous distinguons deux cas différents : fonctions qui retournent une valeur
 (appelés 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

procedure
\end_layout

\end_inset

), et fonctions qui ne retournent pas une valeur (appelés 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

function
\end_layout

\end_inset

).
 Les fonctions peuvent prendre plusieurs arguments, qui sont rendu par valeur
 et pas par référence.
\end_layout

\begin_layout Standard
Nous ne permettons pas d'avoir des fonctions surchargés.
 Aussi, nous ne permettons pas des variables des types comme arguments pour
 les fonctions.
 Par contre, nous permettons des fonctions récurrentes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure print_int_list(l : list of int)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	for i in [0 ...
 l.length()]
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		writeln(l[i].toString());
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function main(list of string) : int
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello World!");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	writeln("Fibonacci numbers:");
\end_layout

\begin_layout Plain Layout

	print_int_list(FIBONACCI);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Tous les fichiers Léa doivent contenir une fonction main, qui prend une
 liste de chaînes de lettre et qui retourne un entier.
 Cette fonction est appelé au début du programme, avec des arguments donné.
\end_layout

\begin_layout Standard
Nous supportons des instructions suivants :
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

VARIABLE := EXPRESSION;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

return EXPRESSION;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FUNCTION(PAR_1, ..., PAR_N);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

if (BOOL_EXPRESSION) INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

if (BOOL_EXPRESSION) INSTRS ELSE INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

for VAR in [INT_EXPRESSION ...
 INT_EXPRESSION] INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

while (BOOL_EXPRESSION) INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

repeat INSTRS while (BOOL_EXPRESSION);
\end_layout

\end_inset


\end_layout

\end_body
\end_document
