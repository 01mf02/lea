#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Documentation de travail :
\begin_inset Newline newline
\end_inset

Création d'un compilateur pour le langage Léa
\end_layout

\begin_layout Author
Michael Färber
\end_layout

\begin_layout Abstract
Nous avons créé un compilateur pour le langage Léa, qui est capable de créer
 du code Java à partir des fichiers Léa.
\end_layout

\begin_layout Section
Cahier des charges précisé
\end_layout

\begin_layout Standard
Notre compilateur est capable de créer du code Java pour un fichier Léa
 donné.
 Un fichier Léa peut contenir les définitions suivantes :
\end_layout

\begin_layout Itemize
Définition des constantes.
\end_layout

\begin_layout Itemize
Définition des types.
\end_layout

\begin_layout Itemize
Définition des fonctions.
\end_layout

\begin_layout Standard
Partout dans le code Léa, on peut écrire des commentaires de façon suivante
 :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// This is a one-line comment.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* This is a more complex,
\end_layout

\begin_layout Plain Layout

   tremendously long,
\end_layout

\begin_layout Plain Layout

   not very expressive
\end_layout

\begin_layout Plain Layout

   multi-line comment.
 */
\end_layout

\end_inset

Tout fichier Léa ne peut pas utiliser des constantes, types et fonctions
 définis dans les autres fichiers Léa.
\end_layout

\begin_layout Subsection
Définition des constantes
\end_layout

\begin_layout Standard
On peut définir des constantes sans donner leur types, de façon suivante
 :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

THIS_IS_FALSE = True;
\end_layout

\begin_layout Plain Layout

MEANING = 42;
\end_layout

\begin_layout Plain Layout

PI = 3.14;
\end_layout

\begin_layout Plain Layout

FIRST_LETTER = 'A';
\end_layout

\begin_layout Plain Layout

SHAKESPEARE = "To be or not to be ...";
\end_layout

\begin_layout Plain Layout

FIBONACCI = [1, 2, 3, 5, 8];
\end_layout

\begin_layout Plain Layout

TUPLE = (MEANING, PI, SHAKESPEARE, FIBONACCI);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Définition des types
\end_layout

\begin_layout Standard
On peut définir des nouveaux types de façon suivante :
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

date = (int, int, int);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

person = struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	name : string;
\end_layout

\begin_layout Plain Layout

	birthday : date;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

person_list = struct
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	elem : person;
\end_layout

\begin_layout Plain Layout

	next : int_list;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Nous supportons l'utilisation des types suivants :
\end_layout

\begin_layout Itemize
Types de base :
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

bool
\end_layout

\end_inset

 : booléen
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

int
\end_layout

\end_inset

 : entier
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

float
\end_layout

\end_inset

 : virgule flottante
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

string
\end_layout

\end_inset

 : chaîne de caractères
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

list of TYPE
\end_layout

\end_inset

 : liste d'éléments de TYPE
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(TYPE_1, TYPE_2, ..., TYPE_N)
\end_layout

\end_inset

 : n-uplet
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

struct { ELEM_1 : TYPE_1, ..., ELEM_N : TYPE_N }
\end_layout

\end_inset

 : structure
\end_layout

\begin_layout Subsection
Définition des fonctions
\end_layout

\begin_layout Standard
Nous distinguons deux cas différents : fonctions qui retournent une valeur
 (appelés 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

procedure
\end_layout

\end_inset

), et fonctions qui ne retournent pas une valeur (appelés 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

function
\end_layout

\end_inset

).
 Les fonctions peuvent prendre plusieurs arguments, qui sont passés par
 valeur.
\end_layout

\begin_layout Standard
Nous ne permettons pas d'avoir des fonctions surchargés.
 Aussi, nous ne permettons pas des variables des types comme arguments pour
 les fonctions.
 Par contre, nous permettons des fonctions récurrentes.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

procedure print_fibonacci(n1 : int, n2 : int, iter : int, count : int)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (iter >= count)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	writeln(n1.toString());
\end_layout

\begin_layout Plain Layout

	n3 : int := n1 + n2;
\end_layout

\begin_layout Plain Layout

	print_fibonacci(n2, n3, iter+1, count);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure print_int_list(l : list of int)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	i : int := 0;
\end_layout

\begin_layout Plain Layout

	while (i < l.length())
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		writeln(l[i].toString());
\end_layout

\begin_layout Plain Layout

		i := i+1;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function main(args : list of string) : int
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	writeln("Hello World!");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	writeln("Fibonacci numbers:");
\end_layout

\begin_layout Plain Layout

	print_int_list(FIBONACCI);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Tous les fichiers Léa doivent contenir une fonction main, qui prend une
 liste de chaînes de lettres et qui retourne un entier.
 Cette fonction est appelée au début du programme, avec des arguments donnés.
\end_layout

\begin_layout Standard
Nous supportons les instructions suivantes :
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

VARIABLE := EXPRESSION;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

return EXPRESSION;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FUNCTION(PAR_1, ..., PAR_N);
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

if (BOOL_EXPRESSION) INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

if (BOOL_EXPRESSION) INSTRS ELSE INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

while (BOOL_EXPRESSION) INSTRS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

repeat INSTRS while (BOOL_EXPRESSION);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans les instructions, on peut avoir des expressions suivantes :
\end_layout

\begin_layout Itemize
Toutes les constantes sont des expressions.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

EXPRESSION $ EXPRESSION
\end_layout

\end_inset

, où 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

$
\end_layout

\end_inset

 peut être :
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

==
\end_layout

\end_inset

: égalité
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!=
\end_layout

\end_inset

: inégalité
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

BOOL_EXPRESSION $ BOOL_EXPRESSION
\end_layout

\end_inset

, où 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

$
\end_layout

\end_inset

 peut être :
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

&&
\end_layout

\end_inset

: ET
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

||
\end_layout

\end_inset

: OU
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!
\end_layout

\end_inset

: NON
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NUMBER_EXPRESSION $ NUMBER_EXPRESSION
\end_layout

\end_inset

, où 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

$
\end_layout

\end_inset

 peut être :
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

+
\end_layout

\end_inset

: addition
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

-
\end_layout

\end_inset

: soustraction
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset

: multiplication
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

/
\end_layout

\end_inset

: division
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

<
\end_layout

\end_inset

: inférieur
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

>
\end_layout

\end_inset

: supérieur
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

<=
\end_layout

\end_inset

: inférieur ou égal
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

>=
\end_layout

\end_inset

: supérieur ou égal
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

INT_EXPRESSION % INT_EXPRESSION
\end_layout

\end_inset

 : modulo
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

- NUMBER_EXPRESSION
\end_layout

\end_inset

 : négation
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

STRING_EXPRESSION + STRING_EXPRESSION
\end_layout

\end_inset

 : concaténation
\end_layout

\begin_layout Standard
Il y a des fonctions predéfinis :
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

writeln
\end_layout

\end_inset

: Prend une chaîne de caractères et l'affiche sur l'écran, terminé avec
 une nouvelle ligne.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

write
\end_layout

\end_inset

: Prend une chaîne de caractères et l'affiche sur l'écran, pas terminé avec
 une nouvelle ligne.
\end_layout

\begin_layout Itemize
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

read
\end_layout

\end_inset

: Attend l'entrée de l'utilisateur et la retourne comme chaîne de caractères.
\end_layout

\begin_layout Standard
Pour les types de base, la fonction 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

toString
\end_layout

\end_inset

 retourne une chaîne de caractères représentant la valeur.
 Pour les listes, la fonction 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

length
\end_layout

\end_inset

 retourne le nombre des objets dans la liste.
\end_layout

\begin_layout Section
Problèmes envisagés
\end_layout

\begin_layout Standard
Le plus grand problème pendant l'implémentation était la coordination du
 développement des parts différents.
 Tandis que la coordination entre syntacticien et sémanticien marchait bien
 grâce à leur relation proche (même origine, mêmes cours, même résidence,
 ...), la coordination avec le développeur était plus difficile, parce-que
 on ne se pouvait pas voir assez souvent pour discuter le travail.
 Aussi, elle pouvait seulement commencer son travail après grands parts
 de la partie des autres étaient finis --- à cause de ça, il fallait faire
 beaucoup de travail à la fin du projet pour elle, engendrent assez souvent
 des conflits avec leurs examens et autres projets.
\end_layout

\begin_layout Standard
Ceci dit, c'était un problème que je n'ai pas défini la architecture du
 projet assez détaillé.
 Ça entraînait des malentendus, qui prenaient quelque temps à résoudre et
 qui mettaient les nerfs à rude épreuve sans raison.
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
Le programme est démarré avec la classe lea.Main, qui initialise le lexer
 et le parser.
 La vérification de types est fait par le parser.
 Si le parser termine son travail sans erreurs, il retourne une table de
 types, une table de constantes et une table de fonctions.
 A partir de ça, la classe Main appelle le générateur de code Java, qui
 génère le code cible Java.
\end_layout

\begin_layout Standard
Nous avons implémenté :
\end_layout

\begin_layout Itemize
Table de types : 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Map<String, Type>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Table de constantes : 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Map<String, Constant>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Table de fonctions : 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Map<String, FunctionInfo>
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

La classe 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FunctionInfo
\end_layout

\end_inset

 sauvegarde un arbre de syntaxe abstrait, le type de sortie de la fonction,
 et les arguments d'entrée comme liste de 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ArgumentInfo
\end_layout

\end_inset

.
 La classe 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ArgumentInfo
\end_layout

\end_inset

 sauvegarde le nom et le type d'une variable d'entrée.
\end_layout

\begin_layout Itemize
Environnement : 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Map<String, VariableInfo>
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

La classe 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

VariableInfo
\end_layout

\end_inset

 sauvegarde le type d'une variable et l'information si la variable était
 déjà initialisé dans le programme.
\end_layout

\begin_layout Itemize
Pile d'environnement :
\begin_inset Note Note
status open

\begin_layout Plain Layout
 TODO.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Types
\end_layout

\begin_layout Standard
Les types sont implémenté dans le paquet lea.types.
 Dedans, il y a une classe de base Type, sur laquelle tous les autres classes
 dans le paquet sont basés.
 Ils sont les suivantes :
\end_layout

\begin_layout Itemize
BoolType : booléen
\end_layout

\begin_layout Itemize
CharType : caractère
\end_layout

\begin_layout Itemize
EnumType : énumération
\end_layout

\begin_layout Itemize
FloatType : nombre flottant
\end_layout

\begin_layout Itemize
IntType : nombre entier
\end_layout

\begin_layout Itemize
ListType : liste, sauvegarde aussi le type d'éléments dans la liste
\end_layout

\begin_layout Itemize
StringType : chaîne de caractères
\end_layout

\begin_layout Itemize
StructType : structure, sauvegarde un ensemble de variables contenus
\end_layout

\begin_layout Itemize
TupleType : uplet, sauvegarde une liste de types contenus
\end_layout

\begin_layout Itemize
UnknownType : utilisé par le parser quand il ne peut pas déterminer le type
 d'une expression
\end_layout

\begin_layout Subsection
Constantes
\end_layout

\begin_layout Standard
Similaire de notre implémentation de types, nous avons implémenté les constantes.
 Ils sont contenus dans un paquet lea.constants, et la classe de base s'appelle
 Constant.
 Les classes dérivés sont :
\end_layout

\begin_layout Itemize
BoolConstant
\end_layout

\begin_layout Itemize
CharConstant
\end_layout

\begin_layout Itemize
EnumConstant
\end_layout

\begin_layout Itemize
FloatConstant
\end_layout

\begin_layout Itemize
IntConstant
\end_layout

\begin_layout Itemize
ListConstant
\end_layout

\begin_layout Itemize
StringConstant
\end_layout

\begin_layout Itemize
TupleConstant
\end_layout

\begin_layout Standard
Les classes sont utilisés à la déclaration des constantes, mais il y a aussi
 des classes qui sont utilisés dans les fonctions ; ils sont BoolConstant,
 CharConstant, FloatConstant, IntConstant et StringConstant.
 Les classes ListConstant et TupleConstant ne sont pas utilisés dans les
 fonctions --- au lieu de cela, on utilise ListNode et TupleNode là.
\end_layout

\begin_layout Subsection
Arbres de syntaxe abstraites
\end_layout

\begin_layout Standard
Les arbres de syntaxe abstraites sont implémentés dans le paquet lea.syntax.
 Là, nous trouvons la classe SyntaxTree, qui est la classe de base pour
 toutes les autres classes dans le paquet.
 Cette classe SyntaxTree contient l'environnement courant et des pointeurs
 à un fils gauche et un fils droite, qui permettent de traverser l'arbre
 de syntaxe d'une façon très simple.
\end_layout

\begin_layout Standard
Nous différencions deux types de nœuds dans l'AST ; des expressions et des
 instructions.
 Les expressions sont implémenté dans la classe Expression, qui permet de
 déterminer le type de l'expression.
 Il y a plusieurs classes hérités de Expression :
\end_layout

\begin_layout Itemize
BoolExp : expressions qui sont de type booléen, comme a != b ou True ||
 False
\end_layout

\begin_layout Itemize
ConstantLeaf : constante
\end_layout

\begin_layout Itemize
EnumExp : ???
\end_layout

\begin_layout Itemize
FunctionCall : appel de fonction
\end_layout

\begin_layout Itemize
FunctionRef : ???
\end_layout

\begin_layout Itemize
ListAccessor : expression de genre 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

liste[i]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
ListNode : expression de genre 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

[1, 2, 3, 4, 5]
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
NumberExp : expressions qui sont de type numérique, entier ou flottant,
 comme 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

2.0*3.14
\end_layout

\end_inset

 ou 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

5%3
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
StringExp : concaténation des chaînes de caractères, comme 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

"Hello" + " world!"
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
StructAccessor : expression de genre 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

structure.element
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
TupleNode : expression de genre 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(1, 'b', C)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
TypeExp : ???
\end_layout

\begin_layout Itemize
VariableLeaf : variable
\end_layout

\begin_layout Standard
Les instruction sont implémenté dans la classe Instruction.
 Les classes hérités sont :
\end_layout

\begin_layout Itemize
Assignment : affectation
\end_layout

\begin_layout Itemize
Case
\end_layout

\begin_layout Itemize
Condition
\end_layout

\begin_layout Itemize
ElseCondition
\end_layout

\begin_layout Itemize
Loop : 
\end_layout

\begin_layout Itemize
Repeat
\end_layout

\begin_layout Itemize
ReturnNode
\end_layout

\begin_layout Itemize
Succ : succession de deux instructions
\end_layout

\begin_layout Itemize
While
\end_layout

\begin_layout Subsection
Traduction en code cible Java
\end_layout

\begin_layout Standard
A faire !
\end_layout

\begin_layout Section
Utilisation
\end_layout

\begin_layout Standard
Appeler 
\begin_inset Quotes fld
\end_inset

ant
\begin_inset Quotes frd
\end_inset

 exécute les tâches suivantes :
\end_layout

\begin_layout Itemize
Créer des fichiers Java à partir des fichiers CUP/JFlex (src/lea.cup et src/lea.jf
lex).
\end_layout

\begin_layout Itemize
Compiler tous les fichiers Java (dans src/).
\end_layout

\begin_layout Itemize
Exécuter le compilateur sur les fichiers Léa mentionnés dans build.xml (target
 
\begin_inset Quotes fld
\end_inset

default
\begin_inset Quotes frd
\end_inset

), écrivant les messages du compilateur dans data/output.txt.
\end_layout

\begin_layout Standard
A partir de tout fichier Léa, le compilateur crée un nouveau répertoire
 (portant le même nom comme le fichier Léa), où il place :
\end_layout

\begin_layout Itemize
Fichiers Java contenant le code cible pour le fichier Léa.
\end_layout

\begin_layout Itemize
Arbres de syntaxe abstraites pour toute fonction dans le fichier Léa, dans
 le format DOT.
\end_layout

\begin_layout Standard
Appeler 
\begin_inset Quotes fld
\end_inset

ant clean
\begin_inset Quotes frd
\end_inset

 efface tous fichiers qui sont créés par 
\begin_inset Quotes fld
\end_inset

ant
\begin_inset Quotes frd
\end_inset

, sauf les fichiers dans data/.
\end_layout

\end_body
\end_document
