MEANING = 42;
PI = 3.14;
SHAKESPEARE = "To be or not to be ...";
FIBONACCI = [1, 2, 3, 5, 8];
TUPLE = (MEANING, PI, SHAKESPEARE, FIBONACCI);

date = (int, int, int);
date2 = date;

person = struct
{
	name : string;
	birthday : date;
}

// singly-linked list
person_list = struct
{
	elem : person;
	next : person_list;
}

complexPerson = (person, person_list);

function recursive() : int
{
	return 1 + recursive();
}

procedure print_int_list(l : list of int)
{
	c:(int, bool, int);

	i:int := l.length();
	print_int_list(l);
	writeln(l[i - 1].toString().length().toString());
	
	/*for i in [0 .. l.length()]
	{
		writeln(l[i].toString());
	}*/
}

function tresbien(l:list of int, it:int,ch:char,st:string) : int
{	
	i:int := 4;
	writeln("Hello World!");
	flop:string := i.toString();
	
	return 0+i+2314223 % 234;
}

function vide() : (int, int, string)
{
	return 4,5,"toto";
}

function main(l : list of string) : int
{
	tresbien([1,1,23,23,34,45], 23, 'a', "asdasd");
	
	vide();
	
	writeln("Hello World!");
	i:int := 4;
	
	t:enum(BLEU, BLANC, ROUGE);
	a:enum(MAUVE, VERT);
	
	t := BLEU;
	a := VERT;
	
	writeln("Fibonacci numbers:");
	print_int_list(FIBONACCI);

	return 0;
}
