package lea;
 
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import lea.types.*;
import lea.constants.*;
import lea.syntax.*;

parser code  {: 
 public void report_fatal_error(String message, Object info) 
  {
  	java_cup.runtime.Symbol symb = (java_cup.runtime.Symbol)info;
  	Main.printError("Ligne : " + symb.left + " Colonne : " + symb.right + "   : " + message, 2);
  }
  
  public void report_error(String message, Object info) 
  {
  	java_cup.runtime.Symbol symb = (java_cup.runtime.Symbol)info;
  	Main.printError("Ligne : " + symb.left + " Colonne : " + symb.right + "   : " + message, 1);
  }
:};
    
terminal SEMIC,PROCEDURE, FUNCTION, LBRACKET, RBRACKET, LPAR, RPAR ,COLON, LBRACE, RBRACE, INT, FLOAT,LIST,OF,STRUCT, STRING, CHAR, BOOL,COMMA;
terminal IF, ELSE, CASE,IN;
terminal WHILE, REPEAT,FOR;
terminal AFF, SLOT, TO;
terminal RETURN;
terminal AND, OR, LT, GT, LE, GE, EQ, DIFF;
terminal PLUS, MINUS, MINUS_U, MULT, DIV, MODULO;

terminal String IDENTIFIER, INTEGER, FLOATEXP, STRINGEXP, CHAREXP, TRUEEXP, FALSEEXP;

non terminal axiom,constDecl,funct,procedure,struct,structDecls, structDecl;
non terminal Instruction decl;
non terminal Type type;
non terminal LinkedList<ArgumentInfo> functDecls;
non terminal ArgumentInfo functDecl;
non terminal SyntaxTree block;
non terminal Instruction instrs, instr;
non terminal Expression expr;
non terminal String BOOLEXP;
non terminal VariableLeaf variable;

precedence left COMMA;
precedence right ELSE;
precedence left AND;
precedence left OR;
precedence left LT, GT, LE, GE, EQ, DIFF;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MODULO;
precedence left MINUS_U;

start with axiom;

axiom ::= 
		funct
		| funct axiom
		| procedure
		| procedure axiom
		| constDecl axiom
		| constDecl	
		| struct axiom
		| struct
		;
		
type ::=
	INT {: RESULT = new IntType();  :}
	| FLOAT {: RESULT = new FloatType();  :}
	| type:t1 COMMA type:t2 {: RESULT = new TupleType(t1, t2); :} 
	| CHAR   {: RESULT = new CharType(); :}
	| STRING  {: RESULT = new StringType(); :}
	| BOOL {: RESULT = new BoolType(); :}
	| LIST OF type:t {: RESULT = new ListType(t); :}
	| IDENTIFIER:t 
	{:
		/*if(Main.)
		{*/
			RESULT = new StructType();
		/*}
		else*/
			//error
		
	:}
	/*| LIST OF IDENTIFIER:t 
	{: //TODO : vérifier pour les identifier struct
	RESULT =  RESULT = new ListType(t); 
	:}*/
	;
		
		
constDecl ::= 
		IDENTIFIER:id EQ INTEGER:i SEMIC
		{:
		  	Main.constTable.put(id, new IntConstant(i));
		  	System.out.println("\nCONST : " + Main.constTable.toString() + "\n");
		:}
		;
		
block ::=
	LBRACE
	{:
	    System.out.println("BLOCK");
	    SyntaxTree sTree = new SyntaxTree(null, null);
	    
	    Main.currentNode = sTree;
	:}  instrs:i RBRACE {: RESULT = i; :}
	;


decl ::=  IDENTIFIER:id COLON type:t SEMIC
	{:
		if(Main.currentNode != null)
		{
			Main.currentNode.getEnvironment().put(id, new VariableInfo(t, false));
			System.out.println("ENV : " + Main.currentNode.getEnvironment().toString());
		}
		else
			System.out.println("D�CLARATION VARIABLE GLOBALE INTERDITE!! FAUT G�RER CA ICI!");
			
		RESULT = new Assignment(new VariableLeaf(id, t), null);
	:}
| IDENTIFIER:id COLON type:t AFF expr:e SEMIC
	{:
		if(Main.currentNode != null)
		{
			Main.currentNode.getEnvironment().put(id, new VariableInfo(t, true));
			
			System.out.println("ENV : " + Main.currentNode.getEnvironment().toString());
			RESULT = new Assignment(new VariableLeaf(id, t), e); 
		}
		else
			System.out.println("D�CLARATION VARIABLE GLOBALE INTERDITE!! FAUT G�RER CA ICI!");
	:} ;

structDecls ::= structDecls structDecl | structDecl;

structDecl ::=  IDENTIFIER:id COLON type:t SEMIC
	{:
		if(Main.currentNode != null)
		{
			Main.currentNode.getEnvironment().put(id, new VariableInfo(t, false));
			System.out.println("ENV : " + Main.currentNode.getEnvironment().toString());
		}
		else
			System.out.println("D�CLARATION VARIABLE GLOBALE INTERDITE!! FAUT G�RER CA ICI!");
			
		RESULT = new Assignment(new VariableLeaf(id, t), null);
	:};

struct ::= IDENTIFIER:id EQ STRUCT 
	 {:
		System.out.println("STRUCT");
	    SyntaxTree sTree = new SyntaxTree(null, null);
	    
	    Main.currentNode = sTree;
	    //Ou mettre le fich?
	    Main.typeTable.put(id,new StructType());
	:}LBRACE structDecls RBRACE 
	;


BOOLEXP ::=
	TRUEEXP:t {:RESULT = t; :}
	|FALSEEXP:t {:RESULT = t; :};

funct ::= 
		FUNCTION IDENTIFIER:id LPAR functDecls:f RPAR COLON type:t block:b
		{:
			FunctionInfo fctInfo = new FunctionInfo(f, t, b);
			Main.fctTable.put(id, fctInfo);
			
			System.out.println("\n\nFCT : " + Main.fctTable.toString() + "\n");
		:};
procedure ::= 
		PROCEDURE IDENTIFIER:id LPAR functDecls:f RPAR block:b
		{:
			FunctionInfo fctInfo = new FunctionInfo(f, null, b);
			Main.fctTable.put(id, fctInfo);
			
			System.out.println("\n\nFCT : " + Main.fctTable.toString() + "\n");
		:};

		
functDecls ::=
	functDecls:l COMMA functDecl:f
	{:
		l.add(f);
		RESULT = l;
	:}
	| functDecl:f 
	{: 
		LinkedList<ArgumentInfo> l = new LinkedList<ArgumentInfo>();
		l.add(f);
		RESULT = l;  
	:}
	;

functDecl ::=  IDENTIFIER:id COLON type:t {: RESULT = new ArgumentInfo(id, t); :} ;
		
instr ::= 
	IF LPAR expr:e RPAR block:i1 ELSE block:i2  {: RESULT = new Condition(e, new ElseCondition(i1, i2)); :}
	| IF LPAR expr:e RPAR block:i   {: RESULT = new Condition(e, i); :}
	| REPEAT TO CASE
	| FOR IDENTIFIER:i IN LBRACKET TO RBRACKET LBRACE block:b RBRACE
	| variable:v AFF expr:e SEMIC 
	{: 
		//TODO MHB : TYPE CHECKING HERE 
		RESULT = new Assignment(v, e); 
	:}
	| REPEAT block:b WHILE LPAR expr:e RPAR 
	{: RESULT = new Loop(e, b); :}
	| decl:d {: RESULT = d;	:}
	;

instrs ::= 
	instrs:i1 instr:i2   {: RESULT = new Succ(i1, i2); :}
	| instr:i  {: RESULT = i; :}
	;

expr ::=
	expr:e1 AND expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.AND); :} 
	|expr:e1 OR expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.OR); :} 
	|expr:e1 LT expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.LT); :} 
	|expr:e1 GT expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.GT); :} 
	|expr:e1 LE expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.LE); :} 
	|expr:e1 GE expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.GE); :} 
	|expr:e1 EQ expr:e2 {: RESULT = new BoolExp(e1, e2, EnumTagExp.EQ); :} 
	|expr:e1 DIFF expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.DIFF); :} 
	|expr:e1 PLUS expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.PLUS); :} 
	|expr:e1 MINUS expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.MINUS); :} 
	|MINUS expr:e {: RESULT = new NumberExp(e, null, EnumTagExp.MINUS_U); :} %prec MINUS_U 
	|expr:e1 MULT expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.MULT); :} 
	|expr:e1 DIV expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.DIV); :} 
	|expr:e1 MODULO expr:e2 {: RESULT = new NumberExp(e1, e2, EnumTagExp.MOD); :} 
	|LPAR expr:e RPAR {: RESULT = e; :}
	|RETURN expr:e {: RESULT = new ReturnNode(e); :}
	|INTEGER:it {: 
		RESULT = new ConstantLeaf(new IntConstant(it), new IntType()); 
		:}
	|FLOATEXP:d {: 
		RESULT = new ConstantLeaf(new FloatConstant(d), new FloatType()); 
		:}
	|STRINGEXP:st {: 
		RESULT = new ConstantLeaf(new StringConstant(st), new StringType());  
		:}
	|CHAREXP:c {: 
		RESULT = new ConstantLeaf(new CharConstant(c), new CharType());  
		:}
	|variable:v {: RESULT = v; :}
	|BOOLEXP:b {: 
		RESULT = new ConstantLeaf(new BoolConstant(b), new BoolType()); 
		:}
	| expr:e1 COMMA expr:e2 {: RESULT = new ListNode(new Succ(e1, e2)); :}
	;
	
	
variable ::=
    	IDENTIFIER:id 
    	{:    		
    		//TODO MHB : RAISE ERROR IF t == null
    		
    		Type t = Main.currentNode.getEnvironment().get(id).getType();
    		RESULT = new VariableLeaf(id, t);
    	:}
    	| IDENTIFIER:id SLOT
    	{:
    		Type t = Main.currentNode.getEnvironment().get(id).getType();
    		RESULT = new VariableLeaf(id, t);
    	:} variable:v1 {:
    		
    		/*Type t = Main.currentNode.getEnvironment().get(v1).getType();
    		RESULT = new VariableLeaf(v1, t);*/
    	:}
    	| IDENTIFIER:id LPAR expr:e RPAR
    	/*| IDENTIFIER:id LBRACKET expr:e RBRACKET
    	{:
    		if(e instanceof IntConstant)
    		{
    			
    		}
    		else if(e instanceof NumberExp)
    		{
    			
    		}
    		else if(e instanceof IntConstant)
    		{
    			
    		}
    		else
    			//error
    	:}*/
	;
	
    
  /**Liste de TODO
  List doit fonctionner
  slot doit fonctionner
  on doit importer tout les variables
  tuples
  retour fonction
  
  */
  
  
  
  
  
  
  
  
  
  
  
  
   
    