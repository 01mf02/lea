
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 25 15:41:01 CET 2012
//----------------------------------------------------

package lea;

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import lea.types.*;
import lea.constants.*;
import org.tp.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 25 15:41:01 CET 2012
  */
public class LeaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LeaParser() {super();}

  /** Constructor which sets the default scanner. */
  public LeaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LeaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\013" +
    "\002\000\002\007\007\000\002\007\005\000\002\007\003" +
    "\000\002\012\004\000\002\012\003\000\002\011\006\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\003\010\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\012\004\013\007\011\014\004\057\010\001" +
    "\002\000\010\004\013\007\011\057\010\001\002\000\016" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\015\ufffc\057\ufffc\001" +
    "\002\000\004\002\070\001\002\000\004\022\065\001\002" +
    "\000\044\005\uffdb\010\uffdb\013\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\001\002\000" +
    "\016\012\017\034\020\057\010\060\014\061\021\062\016" +
    "\001\002\000\004\002\000\001\002\000\016\012\017\034" +
    "\020\057\010\060\014\061\021\062\016\001\002\000\042" +
    "\005\uffdf\010\uffdf\013\uffdf\020\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\036\uffdf\037\uffdf\001\002\000\042\005\uffdc\010" +
    "\uffdc\013\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036" +
    "\uffdc\037\uffdc\001\002\000\042\005\uffdd\010\uffdd\013\uffdd" +
    "\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd" +
    "\001\002\000\016\012\017\034\020\057\010\060\014\061" +
    "\021\062\016\001\002\000\016\012\017\034\020\057\010" +
    "\060\014\061\021\062\016\001\002\000\042\005\uffde\010" +
    "\uffde\013\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036" +
    "\uffde\037\uffde\001\002\000\034\005\027\023\023\024\037" +
    "\025\036\026\033\027\032\030\025\031\030\032\035\033" +
    "\031\034\024\036\026\037\034\001\002\000\016\012\017" +
    "\034\020\057\010\060\014\061\021\062\016\001\002\000" +
    "\016\012\017\034\020\057\010\060\014\061\021\062\016" +
    "\001\002\000\016\012\017\034\020\057\010\060\014\061" +
    "\021\062\016\001\002\000\016\012\017\034\020\057\010" +
    "\060\014\061\021\062\016\001\002\000\012\004\013\007" +
    "\011\014\004\057\010\001\002\000\016\012\017\034\020" +
    "\057\010\060\014\061\021\062\016\001\002\000\016\012" +
    "\017\034\020\057\010\060\014\061\021\062\016\001\002" +
    "\000\016\012\017\034\020\057\010\060\014\061\021\062" +
    "\016\001\002\000\016\012\017\034\020\057\010\060\014" +
    "\061\021\062\016\001\002\000\016\012\017\034\020\057" +
    "\010\060\014\061\021\062\016\001\002\000\016\012\017" +
    "\034\020\057\010\060\014\061\021\062\016\001\002\000" +
    "\016\012\017\034\020\057\010\060\014\061\021\062\016" +
    "\001\002\000\016\012\017\034\020\057\010\060\014\061" +
    "\021\062\016\001\002\000\042\005\uffec\010\uffec\013\uffec" +
    "\020\uffec\023\uffec\024\uffec\025\036\026\033\027\032\030" +
    "\025\031\030\032\035\033\031\034\024\036\026\037\034" +
    "\001\002\000\042\005\uffeb\010\uffeb\013\uffeb\020\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\031\034\024\036\026\037\034\001\002\000" +
    "\042\005\uffe6\010\uffe6\013\uffe6\020\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\031\034\024\036\026\037\034\001\002\000\042\005\uffe1" +
    "\010\uffe1\013\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\037\uffe1\001\002\000\042\005\uffea\010\uffea\013" +
    "\uffea\020\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\031\034\024\036\026\037" +
    "\034\001\002\000\042\005\uffe9\010\uffe9\013\uffe9\020\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\031\034\024\036\026\037\034\001\002" +
    "\000\042\005\uffe5\010\uffe5\013\uffe5\020\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\036\026\037\034\001\002\000\042\005" +
    "\uffe7\010\uffe7\013\uffe7\020\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\031\034" +
    "\024\036\026\037\034\001\002\000\016\002\ufff1\004\ufff1" +
    "\006\051\007\ufff1\015\ufff1\057\ufff1\001\002\000\012\004" +
    "\013\007\011\014\004\057\010\001\002\000\016\002\ufff3" +
    "\004\ufff3\006\ufff3\007\ufff3\015\ufff3\057\ufff3\001\002\000" +
    "\042\005\uffe2\010\uffe2\013\uffe2\020\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\036\uffe2\037\uffe2\001\002\000\042\005\uffe8" +
    "\010\uffe8\013\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\031\034\024" +
    "\036\026\037\034\001\002\000\042\005\uffe4\010\uffe4\013" +
    "\uffe4\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\036\026\037" +
    "\034\001\002\000\042\005\uffed\010\uffed\013\uffed\020\uffed" +
    "\023\uffed\024\037\025\036\026\033\027\032\030\025\031" +
    "\030\032\035\033\031\034\024\036\026\037\034\001\002" +
    "\000\042\005\uffe3\010\uffe3\013\uffe3\020\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\036\uffe3\037\uffe3\001\002\000\034\013" +
    "\061\023\023\024\037\025\036\026\033\027\032\030\025" +
    "\031\030\032\035\033\031\034\024\036\026\037\034\001" +
    "\002\000\042\005\uffe0\010\uffe0\013\uffe0\020\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\001\002\000\034" +
    "\010\063\023\023\024\037\025\036\026\033\027\032\030" +
    "\025\031\030\032\035\033\031\034\024\036\026\037\034" +
    "\001\002\000\012\004\013\007\011\014\004\057\010\001" +
    "\002\000\016\002\ufff2\004\ufff2\006\ufff2\007\ufff2\015\ufff2" +
    "\057\ufff2\001\002\000\016\012\017\034\020\057\010\060" +
    "\014\061\021\062\016\001\002\000\034\020\067\023\023" +
    "\024\037\025\036\026\033\027\032\030\025\031\030\032" +
    "\035\033\031\034\024\036\026\037\034\001\002\000\016" +
    "\002\ufff0\004\ufff0\006\ufff0\007\ufff0\015\ufff0\057\ufff0\001" +
    "\002\000\004\002\001\001\002\000\012\004\uffee\007\uffee" +
    "\015\uffee\057\uffee\001\002\000\004\057\100\001\002\000" +
    "\012\004\013\007\011\015\075\057\010\001\002\000\012" +
    "\004\uffef\007\uffef\015\uffef\057\uffef\001\002\000\016\002" +
    "\ufffd\004\ufffd\006\ufffd\007\ufffd\015\ufffd\057\ufffd\001\002" +
    "\000\010\004\013\007\011\057\115\001\002\000\010\004" +
    "\ufffa\007\ufffa\057\ufffa\001\002\000\004\021\101\001\002" +
    "\000\014\040\107\041\106\042\103\043\105\051\102\001" +
    "\002\000\004\011\111\001\002\000\004\020\ufff5\001\002" +
    "\000\004\020\110\001\002\000\004\020\ufff6\001\002\000" +
    "\004\020\ufff7\001\002\000\004\020\ufff8\001\002\000\010" +
    "\004\ufff9\007\ufff9\057\ufff9\001\002\000\014\040\107\041" +
    "\106\042\103\043\105\051\102\001\002\000\004\020\ufff4" +
    "\001\002\000\010\004\ufffb\007\ufffb\057\ufffb\001\002\000" +
    "\012\004\013\007\011\015\116\057\010\001\002\000\006" +
    "\021\101\022\uffdb\001\002\000\016\002\ufffe\004\ufffe\006" +
    "\ufffe\007\ufffe\015\ufffe\057\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\012\002\005\003\004\006\006\007\011\001" +
    "\001\000\012\003\070\004\072\006\006\013\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\061\006\014\001\001\000\002" +
    "\001\001\000\006\005\021\006\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\057" +
    "\006\014\001\001\000\006\005\056\006\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\055\006\014" +
    "\001\001\000\006\005\054\006\014\001\001\000\006\005" +
    "\053\006\014\001\001\000\006\005\052\006\014\001\001" +
    "\000\010\003\004\006\006\007\047\001\001\000\006\005" +
    "\046\006\014\001\001\000\006\005\045\006\014\001\001" +
    "\000\006\005\044\006\014\001\001\000\006\005\043\006" +
    "\014\001\001\000\006\005\042\006\014\001\001\000\006" +
    "\005\041\006\014\001\001\000\006\005\040\006\014\001" +
    "\001\000\006\005\037\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\004\006\006\007" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\004\006\006\007\063\001\001\000\002\001" +
    "\001\000\006\005\065\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\076\012\075\001\001\000\006\003\073\006\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\070\004\113\006\006\011\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\073\006\006\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LeaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LeaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LeaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LeaParser$actions {
  private final LeaParser parser;

  /** Constructor */
  CUP$LeaParser$actions(LeaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LeaParser$do_action(
    int                        CUP$LeaParser$act_num,
    java_cup.runtime.lr_parser CUP$LeaParser$parser,
    java.util.Stack            CUP$LeaParser$stack,
    int                        CUP$LeaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LeaParser$result;

      /* select the action based on the action number */
      switch (CUP$LeaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= IDENTIFIER 
            {
              AbSynt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(EnumTag.VAR, id); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("variable",4, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= variable 
            {
              AbSynt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt v = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = v; 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= STRINGEXP 
            {
              AbSynt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(EnumTag.STRING, st, new Type(EnumType.STRING));  
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= FLOATING 
            {
              AbSynt RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(EnumTag.REAL, fl, new Type(EnumType.FLOAT)); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= INTEGER 
            {
              AbSynt RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(EnumTag.INTEGER, it, new Type(EnumType.INT)); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAR expr RPAR 
            {
              AbSynt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		 RESULT = e; 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr DIV expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.DIV); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr MULT expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.MULT); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr 
            {
              AbSynt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e, null, EnumTag.MINUS_U); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MINUS expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.MINUS); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr PLUS expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.PLUS, e1.getType()); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr DIFF expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.DIFF); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr EQ expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.EQ); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr GE expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.GE); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr LE expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.LE); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr GT expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.GT); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LT expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.LT); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr OR expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.OR); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr AND expr 
            {
              AbSynt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt e2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e1, e2, EnumTag.AND); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrs ::= instr 
            {
              AbSynt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = i; 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrs ::= instrs instr 
            {
              AbSynt RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt i1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(i1, i2, EnumTag.SUCC); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr ::= variable AFF expr SEMIC 
            {
              AbSynt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).right;
		AbSynt v = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		 RESULT = new AbSynt(v, e, EnumTag.AFF); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= IF expr THEN block 
            {
              AbSynt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e, new AbSynt(i, null, EnumTag.THENELSE), EnumTag.IF); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= WHILE expr DO block 
            {
              AbSynt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e, i, EnumTag.WHILE); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= IF expr THEN block ELSE block 
            {
              AbSynt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-4)).right;
		AbSynt e = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).right;
		AbSynt i1 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i2 = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new AbSynt(e, new AbSynt(i1, i2, EnumTag.THENELSE), EnumTag.IF); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-5)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= LIST OF type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = new Type(t, null, new Integer(i), EnumType.ARRAY); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.STRING); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.CHAR); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.FLOAT); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type(EnumType.INT); 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= IDENTIFIER COLON type SEMIC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;

              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decls ::= decl 
            {
              Object RESULT =null;

              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decls ::= decls decl 
            {
              Object RESULT =null;

              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= instr 
            {
              AbSynt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 RESULT = i; 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= LBRACE instrs RBRACE 
            {
              AbSynt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		 RESULT = i; 
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-2)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= LBRACE NT$0 decls instrs RBRACE 
            {
              AbSynt RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (AbSynt) ((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt i = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		
	    RESULT = i;
	    
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-4)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              AbSynt RESULT =null;
 
		Env n = new Env(Main.currentEnv);
		if (Main.firstEnv==null){
             Main.firstEnv=Main.currentEnv=n;
				} 
		
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // axiom ::= block 
            {
              AbSynt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()).right;
		AbSynt b = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.peek()).value;
		 
    b.toDot("data/arbreSynt"); 
    RESULT=b;  
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("axiom",0, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          return CUP$LeaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= axiom EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).right;
		AbSynt start_val = (AbSynt)((java_cup.runtime.Symbol) CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)).value;
		RESULT = start_val;
              CUP$LeaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LeaParser$stack.elementAt(CUP$LeaParser$top-1)), ((java_cup.runtime.Symbol)CUP$LeaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LeaParser$parser.done_parsing();
          return CUP$LeaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

